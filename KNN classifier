import operator
# Defining a function which calculates euclidean distance between two data points
def euclideanDistance(data1, data2, length):
    distance = 0
    for x in range(length):
        distance += np.square(data1[x] - data2[x])
    return np.sqrt(distance)

# Defining our KNN model
def knn(trainingSet, testInstance, k):
 
    distances = {}
    sort = {}
 
    length = testInstance.shape[1]
    
    #### Start of STEP 3
    # Calculating euclidean distance between each row of training data and test data
    for x in range(len(trainingSet)):
        
        #### Start of STEP 3.1
        dist = euclideanDistance(testInstance, trainingSet.iloc[x], length)

        distances[x] = dist[0]
        #### End of STEP 3.1
 
    #### Start of STEP 3.2
    # Sorting them on the basis of distance
    sorted_d = sorted(distances.items(), key=operator.itemgetter(1))
    #### End of STEP 3.2
 
    neighbors = []
    
    #### Start of STEP 3.3
    # Extracting top k neighbors
    for x in range(k):
        neighbors.append(sorted_d[x][0])
    #### End of STEP 3.3
    classVotes = {}
    
    #### Start of STEP 3.4
    # Calculating the most freq class in the neighbors
    for x in range(len(neighbors)):
        response = trainingSet.iloc[neighbors[x]][-1]
 
        if response in classVotes:
            classVotes[response] += 1
        else:
            classVotes[response] = 1
    #### End of STEP 3.4

    #### Start of STEP 3.5
    sortedVotes = sorted(classVotes.items(), key=operator.itemgetter(1), reverse=True)
    return(sortedVotes[0][0], neighbors)
    #### End of STEP 3.5
    
    ##Creating a dummy testset
testSet = [[24,190]]
test = pd.DataFrame(testSet)

data = pd.DataFrame()
# Some data to play with.
data['duration'] = [184, 134, 243, 186, 122, 197, 294, 382, 102, 264,

                     205, 110, 307, 110, 397, 153, 190, 192, 210, 403,

                     164, 198, 204, 253, 234, 190, 182, 401, 376, 102]

data['loudness'] = [18, 34, 43, 36, 22, 9, 29, 22, 10, 24,

                     20, 10, 17, 51, 7, 13, 19, 12, 21, 22,

                     16, 18, 4, 23, 34, 19, 14, 11, 37, 42]

# We know whether the songs in our training data are jazz or not.
data['jazz'] = [ 1, 0, 0, 0, 1, 1, 0, 1, 1, 0,

                  0, 1, 1, 0, 1, 1, 0, 1, 1, 1,

                  1, 1, 1, 1, 0, 0, 1, 1, 0, 0]
#### Start of STEP 2
# Setting number of neighbors = 1
k = 1
#### End of STEP 2
# Running KNN model
result,neigh = knn(data, test, k)

# Predicted class
print(result)
# Nearest neighbor
print(neigh)
 
